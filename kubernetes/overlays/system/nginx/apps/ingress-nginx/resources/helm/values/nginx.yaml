controller:
  replicaCount: 1
  # dnsPolicy: ClusterFirstWithHostNet
  # hostNetwork: true
  nodeSelector:
    kubernetes.io/os: linux
  ## Define requests resources to avoid probe issues due to CPU utilization in busy nodes
  ## ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903
  ## Ideally, there should be no limits.
  ## https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/
  service:
    type: NodePort
    nodePorts:
      http: "31709"
      https: "32191"
  config:
    use-forwarded-headers: "true"
    proxy-send-timeout: "210"
    proxy-read-timeout: "210"
    proxy-connect-timeout: "210"
  resources:
    # limits:
    #   cpu: 1500m
    #   memory: 1024Mi
    requests:
      cpu: 500m
      memory: 512Mi
  # admissionWebhooks:
  #   name: admission
  #   annotations: {}
  #   # ignore-check.kube-linter.io/no-read-only-rootfs: "This deployment needs write access to root filesystem".
  #
  #   ## Additional annotations to the admission webhooks.
  #   ## These annotations will be added to the ValidatingWebhookConfiguration and
  #   ## the Jobs Spec of the admission webhooks.
  #   enabled: true
  #   # -- Additional environment variables to set
  #   extraEnvs: []
  #   # extraEnvs:
  #   #   - name: FOO
  #   #     valueFrom:
  #   #       secretKeyRef:
  #   #         key: FOO
  #   #         name: secret-resource
  #   # -- Admission Webhook failure policy to use
  #   failurePolicy: Fail
  #   # timeoutSeconds: 10
  #   port: 8443
  #   certificate: "/usr/local/certificates/cert"
  #   key: "/usr/local/certificates/key"
  #   namespaceSelector: {}
  #   objectSelector: {}
  #   # -- Labels to be added to admission webhooks
  #   labels: {}
  #   # -- Use an existing PSP instead of creating one
  #   existingPsp: ""
  #   service:
  #     annotations: {}
  #     # clusterIP: ""
  #     externalIPs: []
  #     # loadBalancerIP: ""
  #     loadBalancerSourceRanges: []
  #     servicePort: 443
  #     type: ClusterIP
  #   createSecretJob:
  #     name: create
  #     # -- Security context for secret creation containers
  #     securityContext:
  #       runAsNonRoot: true
  #       runAsUser: 65532
  #       allowPrivilegeEscalation: false
  #       seccompProfile:
  #         type: RuntimeDefault
  #       capabilities:
  #         drop:
  #           - ALL
  #       readOnlyRootFilesystem: true
  #     resources: {}
  #     # limits:
  #     #   cpu: 10m
  #     #   memory: 20Mi
  #     # requests:
  #     #   cpu: 10m
  #     #   memory: 20Mi
  #   patchWebhookJob:
  #     name: patch
  #     # -- Security context for webhook patch containers
  #     securityContext:
  #       runAsNonRoot: true
  #       runAsUser: 65532
  #       allowPrivilegeEscalation: false
  #       seccompProfile:
  #         type: RuntimeDefault
  #       capabilities:
  #         drop:
  #           - ALL
  #       readOnlyRootFilesystem: true
  #     resources: {}
  #   patch:
  #     enabled: true
  #     image:
  #       registry: registry.k8s.io
  #       image: ingress-nginx/kube-webhook-certgen
  #       ## for backwards compatibility consider setting the full image url via the repository value below
  #       ## use *either* current default registry/image or repository format or installing chart by providing the values.yaml will fail
  #       ## repository:
  #       tag: v20231226-1a7112e06
  #       digest: sha256:25d6a5f11211cc5c3f9f2bf552b585374af287b4debf693cacbe2da47daa5084
  #       pullPolicy: IfNotPresent
  #     # -- Provide a priority class name to the webhook patching job
  #     ##
  #     priorityClassName: ""
  #     podAnnotations: {}
  #     # NetworkPolicy for webhook patch
  #     networkPolicy:
  #       # -- Enable 'networkPolicy' or not
  #       enabled: false
  #     nodeSelector:
  #       kubernetes.io/os: linux
  #     tolerations: []
  #     # -- Labels to be added to patch job resources
  #     labels: {}
  #     # -- Security context for secret creation & webhook patch pods
  #     securityContext: {}
  #   # Use certmanager to generate webhook certs
  #   certManager:
  #     enabled: false
  #     # self-signed root certificate
  #     rootCert:
  #       # default to be 5y
  #       duration: ""
  #     admissionCert:
  #       # default to be 1y
  #       duration: ""
  #       issuerRef:
  #         name: "letsencrypt"
  #         kind: "ClusterIssuer"
